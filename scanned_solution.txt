```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to compute the longest proper prefix suffix (LPS) array for the pattern
void computeLPSArray(char *pattern, int m, int *lps) {
    int length = 0;
    lps[0] = 0;
    int i = 1;
    while (i < m) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Function to find all occurrences of the pattern in the text using KMP algorithm
void KMPSearch(char *text, char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);

    int *lps = (int *)malloc(sizeof(int) * m);
    computeLPSArray(pattern, m, lps);

    int i = 0; // Index for text
    int j = 0; // Index for pattern

    printf("[");
    int first = 1; // Flag for the first occurrence

    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            if (!first) {
                printf(", ");
            }
            printf("%d", i - j);
            first = 0;
            j = lps[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    printf("]\n");
    free(lps);
}

int main() {
    char text[1000001];
    char pattern[100001];

    printf("Enter the text: ");
    scanf("%s", text);

    printf("Enter the pattern: ");
    scanf("%s", pattern);

    KMPSearch(text, pattern);

    return 0;
}
```

**Explanation:**

1. **`computeLPSArray(char *pattern, int m, int *lps)`:**
   - This function calculates the LPS array for the pattern. The LPS array stores the length of the longest proper prefix suffix for each prefix of the pattern.
   - It iterates through the pattern and compares characters.
   - If a match is found, it increments the length and updates the LPS array.
   - If a mismatch occurs, it checks if there's a shorter prefix suffix that matches, using the LPS array itself.

2. **`KMPSearch(char *text, char *pattern)`:**
   - This function implements the KMP algorithm to search for the pattern in the text.
   - It initializes variables: `i` for text index, `j` for pattern index, `lps` array, and `first` flag.
   - It iterates through the text:
     - If the characters match, both indices are incremented.
     - If the pattern is found (j reaches the end of the pattern), the starting index is printed.
     - If a mismatch occurs:
       - If `j` is not 0, the LPS array is used to shift the pattern back.
       - Otherwise, the text index is incremented.

**How to run the code:**

1. Save the code as a `.c` file (e.g., `kmp.c`).
2. Compile the code using a C compiler: `gcc kmp.c -o kmp`
3. Run the compiled executable: `./kmp`
4. Enter the DNA sequence text and pattern when prompted.

**Example Output:**

```
Enter the text: ACGTACGTGACG
Enter the pattern: ACG
[0, 4, 9]
```
